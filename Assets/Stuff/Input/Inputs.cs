//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Stuff/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Char"",
            ""id"": ""4b0e4e9c-bbc4-462b-bc69-84203c518bc3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b472c9b2-e675-44dc-b209-89950f5637c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""View"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b9d9661-a5c2-42a7-96ec-a64ae8bfa6e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""381e9ca9-9f83-4e7a-936c-119e1673b0c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""f9298a18-e769-42ce-92b2-a18f9d6fb950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Prone"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d29ec9fd-4ce8-45da-8c0b-8c6d360960e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""59b305ac-88c4-48c8-ae85-b3bdd2ee85a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""f4e03b7d-22a3-4df2-bf22-df23b7db747d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2301ede2-03ad-459a-9585-bb10336ccfa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Climb"",
                    ""type"": ""Button"",
                    ""id"": ""9e83c6ab-542e-4113-bf25-e9d3b334a655"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa634192-07c6-4724-9739-084f49c31cfd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b3a6cd96-4a41-41ea-a082-22740c314d4a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99cfd336-23aa-466f-a691-92aa3e54d121"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f52d683-ef26-4337-ab45-0004b6d2c5dc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""383972fc-9c81-4cc2-a787-73288ea06ea1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""621896d7-e7e6-43f4-8f8f-c7c530469fe0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cebb9110-1087-4e64-9ffa-56b1ddaed4c4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fdfa59a-5996-4aaa-9815-b006f942d1c2"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e169c049-cf35-4b59-a645-141ba51b35af"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5cfbb638-5555-4959-acf2-b34c0657d695"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Prone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fec56f96-9565-432b-b286-3f0eeab00967"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b680630b-3e69-49cd-a071-16c2392341cd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59d3f060-6f49-41d8-9ef9-3e4c3e92d7be"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa85ee55-740a-4586-aad5-b9c9c61622a1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Climb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapon"",
            ""id"": ""87043788-d5f0-402c-bbdd-f0c0b449aa28"",
            ""actions"": [
                {
                    ""name"": ""FirePressed"",
                    ""type"": ""Button"",
                    ""id"": ""6e41a226-663e-41a7-af1c-423bd47074e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireReleased"",
                    ""type"": ""Button"",
                    ""id"": ""cbf0c549-9c85-446a-a9ed-71454250853f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e5a37a2-7721-4892-a751-8628efbf679c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirePressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5803c7c7-1e24-4770-9451-a5f2561f9b9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Char
        m_Char = asset.FindActionMap("Char", throwIfNotFound: true);
        m_Char_Movement = m_Char.FindAction("Movement", throwIfNotFound: true);
        m_Char_View = m_Char.FindAction("View", throwIfNotFound: true);
        m_Char_Jump = m_Char.FindAction("Jump", throwIfNotFound: true);
        m_Char_Crouch = m_Char.FindAction("Crouch", throwIfNotFound: true);
        m_Char_Prone = m_Char.FindAction("Prone", throwIfNotFound: true);
        m_Char_Sprint = m_Char.FindAction("Sprint", throwIfNotFound: true);
        m_Char_Hook = m_Char.FindAction("Hook", throwIfNotFound: true);
        m_Char_Dash = m_Char.FindAction("Dash", throwIfNotFound: true);
        m_Char_Climb = m_Char.FindAction("Climb", throwIfNotFound: true);
        // Weapon
        m_Weapon = asset.FindActionMap("Weapon", throwIfNotFound: true);
        m_Weapon_FirePressed = m_Weapon.FindAction("FirePressed", throwIfNotFound: true);
        m_Weapon_FireReleased = m_Weapon.FindAction("FireReleased", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Char
    private readonly InputActionMap m_Char;
    private ICharActions m_CharActionsCallbackInterface;
    private readonly InputAction m_Char_Movement;
    private readonly InputAction m_Char_View;
    private readonly InputAction m_Char_Jump;
    private readonly InputAction m_Char_Crouch;
    private readonly InputAction m_Char_Prone;
    private readonly InputAction m_Char_Sprint;
    private readonly InputAction m_Char_Hook;
    private readonly InputAction m_Char_Dash;
    private readonly InputAction m_Char_Climb;
    public struct CharActions
    {
        private @Inputs m_Wrapper;
        public CharActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Char_Movement;
        public InputAction @View => m_Wrapper.m_Char_View;
        public InputAction @Jump => m_Wrapper.m_Char_Jump;
        public InputAction @Crouch => m_Wrapper.m_Char_Crouch;
        public InputAction @Prone => m_Wrapper.m_Char_Prone;
        public InputAction @Sprint => m_Wrapper.m_Char_Sprint;
        public InputAction @Hook => m_Wrapper.m_Char_Hook;
        public InputAction @Dash => m_Wrapper.m_Char_Dash;
        public InputAction @Climb => m_Wrapper.m_Char_Climb;
        public InputActionMap Get() { return m_Wrapper.m_Char; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharActions set) { return set.Get(); }
        public void SetCallbacks(ICharActions instance)
        {
            if (m_Wrapper.m_CharActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnMovement;
                @View.started -= m_Wrapper.m_CharActionsCallbackInterface.OnView;
                @View.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnView;
                @View.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnView;
                @Jump.started -= m_Wrapper.m_CharActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_CharActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnCrouch;
                @Prone.started -= m_Wrapper.m_CharActionsCallbackInterface.OnProne;
                @Prone.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnProne;
                @Prone.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnProne;
                @Sprint.started -= m_Wrapper.m_CharActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnSprint;
                @Hook.started -= m_Wrapper.m_CharActionsCallbackInterface.OnHook;
                @Hook.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnHook;
                @Hook.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnHook;
                @Dash.started -= m_Wrapper.m_CharActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnDash;
                @Climb.started -= m_Wrapper.m_CharActionsCallbackInterface.OnClimb;
                @Climb.performed -= m_Wrapper.m_CharActionsCallbackInterface.OnClimb;
                @Climb.canceled -= m_Wrapper.m_CharActionsCallbackInterface.OnClimb;
            }
            m_Wrapper.m_CharActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @View.started += instance.OnView;
                @View.performed += instance.OnView;
                @View.canceled += instance.OnView;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Prone.started += instance.OnProne;
                @Prone.performed += instance.OnProne;
                @Prone.canceled += instance.OnProne;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Hook.started += instance.OnHook;
                @Hook.performed += instance.OnHook;
                @Hook.canceled += instance.OnHook;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Climb.started += instance.OnClimb;
                @Climb.performed += instance.OnClimb;
                @Climb.canceled += instance.OnClimb;
            }
        }
    }
    public CharActions @Char => new CharActions(this);

    // Weapon
    private readonly InputActionMap m_Weapon;
    private IWeaponActions m_WeaponActionsCallbackInterface;
    private readonly InputAction m_Weapon_FirePressed;
    private readonly InputAction m_Weapon_FireReleased;
    public struct WeaponActions
    {
        private @Inputs m_Wrapper;
        public WeaponActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirePressed => m_Wrapper.m_Weapon_FirePressed;
        public InputAction @FireReleased => m_Wrapper.m_Weapon_FireReleased;
        public InputActionMap Get() { return m_Wrapper.m_Weapon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponActions set) { return set.Get(); }
        public void SetCallbacks(IWeaponActions instance)
        {
            if (m_Wrapper.m_WeaponActionsCallbackInterface != null)
            {
                @FirePressed.started -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFirePressed;
                @FirePressed.performed -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFirePressed;
                @FirePressed.canceled -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFirePressed;
                @FireReleased.started -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFireReleased;
                @FireReleased.performed -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFireReleased;
                @FireReleased.canceled -= m_Wrapper.m_WeaponActionsCallbackInterface.OnFireReleased;
            }
            m_Wrapper.m_WeaponActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirePressed.started += instance.OnFirePressed;
                @FirePressed.performed += instance.OnFirePressed;
                @FirePressed.canceled += instance.OnFirePressed;
                @FireReleased.started += instance.OnFireReleased;
                @FireReleased.performed += instance.OnFireReleased;
                @FireReleased.canceled += instance.OnFireReleased;
            }
        }
    }
    public WeaponActions @Weapon => new WeaponActions(this);
    public interface ICharActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnView(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnProne(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnHook(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnClimb(InputAction.CallbackContext context);
    }
    public interface IWeaponActions
    {
        void OnFirePressed(InputAction.CallbackContext context);
        void OnFireReleased(InputAction.CallbackContext context);
    }
}
